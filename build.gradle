import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer

//======================================================================
// PROJECT
//======================================================================

version = '1.0'
group = 'com.sony.ebs.octopus3'

//======================================================================
// REPOSITORIES
//======================================================================

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://mvn.sony-europe.com/content/groups/global" }
        maven { url "http://repo.spring.io/libs-release-remote" }
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'http://oss.jfrog.org/repo' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.ratpack:ratpack-gradle:$ratpackVersion"
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.2'
    }
}

repositories {
    mavenLocal()
    maven { url 'https://mvn.sony-europe.com/content/groups/global' }
    maven { url 'http://repo.spring.io/libs-release' }
    maven { url 'http://repo.springsource.org/repo' }
    maven { url 'http://oss.jfrog.org/repo' }
    mavenCentral()
}

//======================================================================
// PLUGINS
//======================================================================

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "nexus"
apply plugin: "com.github.johnrengelman.shadow"

//======================================================================
// CONFIGURATIONS
//======================================================================

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
defaultTasks 'clean', 'build'
applicationDefaultJvmArgs = [
        "-Dio.netty.eventLoopThreads=20"
]

configurations {
    all {
        exclude module: 'groovy'
    }
    sshAntTask {
        logging.level = LogLevel.INFO
    }
}

idea {
    project {
        jdkName '1.7'
        languageLevel '1.7'
    }
    module {
        inheritOutputDirs = false
        outputDir = compileGroovy.destinationDir
        testOutputDir = compileTestGroovy.destinationDir

    }
}

shadowJar {
    baseName = "${project.name}-app"
    classifier = group
    transform(AppendingTransformer) {
        resource = 'META-INF/spring.handlers'
    }
    transform(AppendingTransformer) {
        resource = 'META-INF/spring.schemas'
    }
}

run {
    systemProperty('storage.root', System.getProperty('storage.root') ?: System.getProperty('java.io.tmpdir'))
    systemProperty('environment', System.getProperty('environment'))
    systemProperty('logback.configurationFile', System.getProperty('logback.configurationFile'))
}
test {
    systemProperty('environment', 'test')
    exclude 'com/sony/ebs/octopus3/amazon/benchmark/**'
}

//======================================================================
// DEPENDENCIES
//======================================================================

dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.9.2'
    compile "com.sony.ebs.octopus3:octopus3-commons:1.1"
    compile "com.sony.ebs.octopus3:octopus3-commons-ratpack:1.0"
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'commons-io:commons-io:2.4'

    // SPRING
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"

    testCompile 'junit:junit:4.11'
    testCompile 'info.cukes:cucumber-junit:1.1.7'
    testCompile 'info.cukes:cucumber-groovy:1.1.7'

    // RATPACK
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0', {
        exclude module: 'groovy-all'
    }
    compile ratpack.dependency("jackson")
    compile ratpack.dependency("rx")

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'

    compile "com.amazonaws:aws-java-sdk:1.2.9"

}

//======================================================================
// TASKS
//======================================================================

task wrapper(type: Wrapper) {
    gradleVersion = 2.0
}

//======================================================================
// DEPLOY ARTIFACTS
//======================================================================

nexus {
    attachSources = true
    attachTests = false
    attachJavadoc = false
    sign = false
    repositoryUrl = 'https://mvn.sony-europe.com/content/repositories/releases'
    snapshotRepositoryUrl = 'https://mvn.sony-europe.com/content/repositories/snapshots'
}

task devRelease() {
    description = "Upload shadow jar to dev server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(devReleasePassword.decodeBase64())

    doLast {
        devUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app-$version-Shadow.jar"),
                        todir: "${devReleaseUser}@${host}:${devUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        devStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: devReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: devStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}

task tqaRelease() {
    description = "Upload shadow jar to tqa server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(tqaReleasePassword.decodeBase64())

    doLast {
        tqaUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app-$version-Shadow.jar"),
                        todir: "${tqaReleaseUser}@${host}:${tqaUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        tqaStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: tqaReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: tqaStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}

task prdRelease() {
    description = "Upload shadow jar to prd server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(prdReleasePassword.decodeBase64())

    doLast {
        prdUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app-$version-Shadow.jar"),
                        todir: "${prdReleaseUser}@${host}:${prdUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        prdStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: prdReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: prdStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}